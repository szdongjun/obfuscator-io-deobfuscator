# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
            - 名称：设置 Node.js 环境
  用途：actions/setup-node@v4.0.3
  和：
    # 在 npmrc 中设置 always-auth。
    always-auth: # 可选，默认为 false
    # 要使用的版本的版本规范。示例：12.x、10.15.1、>=10.15.0。
    节点版本：#可选
    # 包含要使用的版本的版本规范的文件。示例：package.json、.nvmrc、.node-version、.tool-versions。
    node-version-file: # 可选
    # Node 要使用的目标架构。示例：x86、x64。默认情况下将使用系统架构。
    架构：#可选
    # 如果您希望操作检查满足版本规范的最新可用版本，请设置此选项。
    检查最新：#可选
    # 可选注册表，用于设置身份验证。将在项目级 .npmrc 和 .yarnrc 文件中设置注册表，并设置身份验证以从 env.NODE_AUTH_TOKEN 读取。
    registry-url: # 可选
    # 针对范围注册表进行身份验证的可选范围。使用 GitHub Packages 注册表 (https://npm.pkg.github.com/) 时将返回到存储库所有者。
    范围：#可选
    # 用于从节点版本中提取节点分布。由于存在默认值，因此用户通常不提供该值。在 github.com 上运行此操作时，默认值就足够了。在 GHES 上运行时，如果您遇到速率限制，则可以传递 github.com 的个人访问令牌。
    token: # 可选，默认为 ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # 用于指定在默认目录中缓存的包管理器。支持的值：npm、yarn、pnpm。
    缓存：#可选
    # 用于指定依赖文件的路径：package-lock.json、yarn.lock 等。支持通配符或文件名列表，用于缓存多个依赖项。
    缓存依赖路径：#可选
          
            - 名称：缓存
  用途：actions/cache@v4.0.2
  和：
    # 要缓存和恢复的文件、目录和通配符模式的列表
    小路：
    # 用于恢复和保存缓存的显式密钥
    钥匙：
    # 如果未发生键的缓存命中，则使用有序的键列表来恢复过时的缓存。注意，在这种情况下，“cache-hit”将返回 false。
    恢复密钥：# 可选
    # 上传过程中用于分割大文件的块大小，以字节为单位
    上传块大小：#可选
    # 启用时可选布尔值，允许 Windows 运行器保存或恢复可在其他平台上分别恢复或保存的缓存
    enableCrossOsArchive: # 可选，默认为 false
    # 如果未找到缓存条目，则工作流失败
    fail-on-cache-miss: # 可选，默认为 false
    # 检查给定输入（key、restore-keys）的缓存条目是否存在，无需下载缓存
    lookup-only: # 可选，默认为 false
    # 即使之前的步骤失败，也要运行后续步骤来保存缓存
    save-always: # 可选，默认为 false
            - 名称：设置 Node.js 环境
  用途：actions/setup-node@v4.0.3
  和：
    # 在 npmrc 中设置 always-auth。
    always-auth: # 可选，默认为 false
    # 要使用的版本的版本规范。示例：12.x、10.15.1、>=10.15.0。
    节点版本：#可选
    # 包含要使用的版本的版本规范的文件。示例：package.json、.nvmrc、.node-version、.tool-versions。
    node-version-file: # 可选
    # Node 要使用的目标架构。示例：x86、x64。默认情况下将使用系统架构。
    架构：#可选
    # 如果您希望操作检查满足版本规范的最新可用版本，请设置此选项。
    检查最新：#可选
    # 可选注册表，用于设置身份验证。将在项目级 .npmrc 和 .yarnrc 文件中设置注册表，并设置身份验证以从 env.NODE_AUTH_TOKEN 读取。
    registry-url: # 可选
    # 针对范围注册表进行身份验证的可选范围。使用 GitHub Packages 注册表 (https://npm.pkg.github.com/) 时将返回到存储库所有者。
    范围：#可选
    # 用于从节点版本中提取节点分布。由于存在默认值，因此用户通常不提供该值。在 github.com 上运行此操作时，默认值就足够了。在 GHES 上运行时，如果您遇到速率限制，则可以传递 github.com 的个人访问令牌。
    token: # 可选，默认为 ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # 用于指定在默认目录中缓存的包管理器。支持的值：npm、yarn、pnpm。
    缓存：#可选
    # 用于指定依赖文件的路径：package-lock.json、yarn.lock 等。支持通配符或文件名列表，用于缓存多个依赖项。
    缓存依赖路径：#可选
            - 名称：安装 Java JDK
  用途：actions/setup-java@v4.2.1
  和：
    # 要设置的 Java 版本。采用完整或 semver Java 版本。请参阅 README 文件中支持的语法示例
    java-version: # 可选
    # `.java-version` 文件的路径。请参阅 README 文件中支持的语法示例
    java-version-file: # 可选
    # Java 发行版。请参阅 README 文件中支持的发行版列表
    分配：
    # 软件包类型 (jdk, jre, jdk+fx, jre+fx)
    java-package: # 可选，默认为 jdk
    # 包的架构（默认为动作运行器的架构）
    架构：#可选
    # 压缩 JDK 所在路径
    jdkFile: # 可选
    # 如果您希望操作检查满足版本规范的最新可用版本，请设置此选项
    检查最新：#可选
    # pom.xml 文件中 distributionManagement 存储库的 ID。默认为“github”
    server-id: # 可选，默认为 github
    # 用于向 Apache Maven 存储库进行身份验证的用户名的环境变量名称。默认值为 $GITHUB_ACTOR
    server-username: # 可选，默认为 GITHUB_ACTOR
    # 用于向 Apache Maven 存储库进行身份验证的密码或令牌的环境变量名称。默认值为 $GITHUB_TOKEN
    server-password: # 可选，默认为 GITHUB_TOKEN
    # 设置.xml 文件的写入路径。默认为 ~/.m2。
    设置路径：#可选
    # 如果存在 settings.xml 文件，则覆盖它。默认值为“true”。
    覆盖设置：# 可选，默认为 true
    # 要导入的 GPG 私钥。默认为空字符串。
    gpg-private-key: # 可选
    # GPG 私钥密码的环境变量名称。默认为 $GPG_PASSPHRASE。
    gpg-passphrase: # 可选
    # 用于缓存依赖项的构建平台的名称。它可以是“maven”、“gradle”或“sbt”。
    缓存：#可选
    # 依赖文件的路径：pom.xml、build.gradle、build.sbt 等。此选项可与 `cache` 选项一起使用。如果省略此选项，操作将在整个存储库中搜索依赖文件。此选项支持通配符和文件名列表，用于缓存多个依赖项。
    缓存依赖路径：#可选
    # 将作业状态传递到作业发布步骤的解决方法。此变量不适用于手动设置
    job-status: # 可选，默认为 ${{ job.status }}
    # 获取托管在 github.com 上的版本清单（例如 OpenJDK 的 Microsoft Build）时用于进行身份验证的令牌。在 github.com 上运行此操作时，默认值就足够了。在 GHES 上运行时，如果您遇到速率限制，则可以传递 github.com 的个人访问令牌。
    token: # 可选，默认为 ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # 如果不需要默认名称“${distribution}_${java-version}”，则为 Maven 工具链 ID 的名称。请参阅高级使用文件中支持的语法示例
    mvn-toolchain-id: # 可选
    # 如果不需要默认名称“${distribution}”，则为 Maven 工具链供应商的名称。请参阅高级使用文件中支持的语法示例
    mvn-toolchain-vendor: # 可选
            - 名称：设置 Go 环境
  用途：actions/setup-go@v5.0.2
  和：
    # 要下载（如有必要）并使用的​​ Go 版本。支持 semver 规范和范围。请务必将此选项括在单引号中。
    go-version: # 可选
    # go.mod 或 go.work 文件的路径。
    go-version-file: # 可选
    # 如果您希望操作始终检查满足版本规范的最新可用版本，请将此选项设置为 true
    检查最新：#可选
    # 用于从 go-versions 中提取 Go 发行版。由于存在默认值，因此用户通常不提供该值。在 github.com 上运行此操作时，默认值就足够了。在 GHES 上运行时，如果您遇到速率限制，则可以传递 github.com 的个人访问令牌。
    token: # 可选，默认为 ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # 用于指定是否需要缓存。如果您想启用缓存，请设置为 true。
    cache: # 可选，默认为 true
    # 用于指定依赖文件的路径 - go.sum
    缓存依赖路径：#可选
    # Go 使用的目标架构。示例：x86、x64。默认使用系统架构。
    架构：#可选
            - 名称：首次互动
  用途：actions/first-interaction@v1.3.0
  和：
    # 存储库的令牌。可以使用 {{ secrets.GITHUB_TOKEN }} 传入
    回购代币：
    # 对个人第一期发布内容发表评论
    问题信息：# 可选
    # 对个人第一个拉取请求发表的评论
    pr-message: # 可选
                                                  
